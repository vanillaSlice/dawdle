openapi: 3.0.3

info:
  title: Dawdle API
  version: v0.1.0

servers:
  - url: https://dawdle-api.mikelowe.xyz/api
  - url: http://127.0.0.1:5000/api

tags:
  - name: auth
  - name: proposed-auth

paths:
  /auth/sign-up:
    post:
      summary: Signs a new user up
      tags:
        - auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /auth/verify:
    post:
      summary: Requests a verification email to be sent
      tags:
        - auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /auth/verify/{token}:
    post:
      summary: Verifies a user's email address from the token sent
      tags:
        - auth
      security: []
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'

  /auth/token:
    post:
      summary: Returns an access token
      tags:
        - auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /auth/token/refresh:
    get:
      summary: Returns an access token using a refresh token
      tags:
        - auth
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'

  /auth/reset-password:
    post:
      summary: Requests a password reset email to be sent
      tags:
        - auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /auth/reset-password/{token}:
    post:
      summary: Resets a user's password
      tags:
        - auth
      security: []
      parameters:
        - $ref: '#/components/parameters/Token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /auth/users/{user_id}/password:
    post:
      summary: Updates a user's password
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        415:
          $ref: '#/components/responses/415'

  /auth/users/{user_id}/email:
    post:
      summary: Updates a user's email
      tags:
        - proposed-auth
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /auth/users/{user_id}:
    delete:
      summary: Deletes a user's account
      tags:
        - proposed-auth
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'

components:
  parameters:
    Token:
      name: token
      in: path
      required: true
      schema:
        type: string

    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: string

  responses:
    201:
      description: Created
    204:
        description: No Content
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    415:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Email:
      type: object
      properties:
        email:
          type: string
      required:
        - email

    Error:
      type: object
      properties:
        status:
          type: integer
        name:
          type: string
        description:
          type: string
        messages:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - status
        - name
        - description

    Password:
      type: object
      properties:
        password:
          type: string
      required:
        - password

    Token:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user_id:
          type: string
      required:
        - access_token
        - user_id

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: []
